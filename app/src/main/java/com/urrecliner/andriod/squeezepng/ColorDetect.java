package com.urrecliner.andriod.squeezepng;

class ColorDetect {

    static boolean isRedColor(int nowColor) {

        switch (nowColor) {

            case 0xFFFFEFEF:
            case 0xFFFFDFDF:
            case 0xFFFFD8D8:
            case 0xFFFFD7D7:
            case 0xFFFFCFCF:
            case 0xFFFFBFBF:
            case 0xFFFFBEBE:
            case 0xFFFFBDBD:
            case 0xFFFFBCBC:
            case 0xFFFFAFAF:
            case 0xFFFF9F9F:
            case 0xFFFF9A9A:
            case 0xFFFF9999:
            case 0xFFFF9898:
            case 0xFFFF9797:
            case 0xFFFF8F8F:
            case 0xFFFF8282:
            case 0xFFFF8181:
            case 0xFFFF8080:
            case 0xFFFF7F7F:
            case 0xFFFF7E7E:
            case 0xFFFF7D7D:
            case 0xFFFF7C7C:
            case 0xFFFF7979:
            case 0xFFFF7777:
            case 0xFFFF7070:
            case 0xFFFF6060:
            case 0xFFFF5050:
            case 0xFFFF4444:
            case 0xFFFF4343:
            case 0xFFFF4242:
            case 0xFFFF4141:
            case 0xFFFF4040:
            case 0xFFFF3E3E:
            case 0xFFFF3030:
            case 0xFFFF2A2A:
            case 0xFFFF2929:
            case 0xFFFF2828:
            case 0xFFFF2727:
            case 0xFFFF2626:
            case 0xFFFF2020:
            case 0xFFFF1010:
            case 0xFFFF0303:
            case 0xFFFF0202:
            case 0xFFFF0101:
            case 0xFFFF0000:
            case 0xFFFE2727:
            case 0xFFFE2020:
            case 0xFFFE1010:
            case 0xFFFE0E0E:
            case 0xFFFE0707:
            case 0xFFFE0000:
            case 0xFFFD1616:
            case 0xFFFD0A0A:
            case 0xFFFC0D0D:
            case 0xFFFBFBFB:
            case 0xFFFBFAFA:
            case 0xFFFAFAFA:
            case 0xFFF9F3F3:
            case 0xFFF9F2F2:
            case 0xFFF92F2F:
            case 0xFFF84949:
            case 0xFFF7F1F1:
            case 0xFFF79696:
            case 0xFFF6F6F6:
            case 0xFFF6ECEC:
            case 0xFFF6EAEA:
            case 0xFFF6E9E9:
            case 0xFFF6E2E2:
            case 0xFFF6CBCB:
            case 0xFFF69696:
            case 0xFFF67474:
            case 0xFFF65151:
            case 0xFFF64A4A:
            case 0xFFF5F5F5:
            case 0xFFF5E5E5:
            case 0xFFF5E1E1:
            case 0xFFF5DBDB:
            case 0xFFF4CCCC:
            case 0xFFF3DBDB:
            case 0xFFF2D0D0:
            case 0xFFF27171:
            case 0xFFF1F1F1:
            case 0xFFF1F0F0:
            case 0xFFF1DEDE:
            case 0xFFF1CDCD:
            case 0xFFF1B3B3:
            case 0xFFF16F6F:
            case 0xFFF14444:
            case 0xFFF0D0D0:
            case 0xFFEF7272:
            case 0xFFECEBEB:
            case 0xFFEC9F9F:
            case 0xFFEBEBEB:
            case 0xFFEBEAEA:
            case 0xFFEBAAAA:
            case 0xFFEB9696:
            case 0xFFEB7474:
            case 0xFFEAEAEA:
            case 0xFFEAB8B8:
            case 0xFFE7B5B5:
            case 0xFFE6E6E6:
            case 0xFFE4E4E4:
            case 0xFFE3E3E3:
            case 0xFFE3B8B8:
            case 0xFFE1E1E1:
            case 0xFFDDDDDD:
            case 0xFFDCDCDC:
            case 0xFFDCDBDB:
            case 0xFFDBDBDB:
            case 0xFFDADADA:
            case 0xFFD8D7D7:
            case 0xFFD6D6D6:
            case 0xFFD3D3D3:
            case 0xFFD2D1D1:
            case 0xFFD1D0D0:
            case 0xFFCF9999:
            case 0xFFCD9797:
            case 0xFFCCCCCC:
            case 0xFFCB8B8B:
            case 0xFFC9C9C9:
            case 0xFFC7C7C7:
            case 0xFFC3C3C3:
            case 0xFFC0C0C0:
            case 0xFFBDBDBD:
            case 0xFFBABABA:
            case 0xFFAEAEAE:
            case 0xFFA4A4A4:
            case 0xFF9C9C9C:
            case 0xFF939393:
            case 0xFF868686:
            case 0xFF777777:
            case 0xFF686868:
                return true;
            default:
                return false;
        }
    }

    private static int [] toBlacks = {
            0xffC4BECA, 0xffC4BEC8, 0xffC3C0C7, 0xffC3BED2, 0xffC2C0CB, 0xffC2BFC6, 0xffC2BECC, 0xffC1C0CE, 0xffC1C0C6, 0xffC1BDBE, 0xffC1BCC0, 0xffC1BBC7, 0xffC1BBC5, 0xffC1B9C8, 0xffC1B9C6, 0xffC0CCC0, 0xffC0C9C6, 0xffC0C8CB, 0xffC0C8CA, 0xffC0C5C9, 0xffC0C5C8, 0xffC0C4CD, 0xffC0C4C3, 0xffC0C3CC, 0xffC0C3CA,
            0xffC0C3C8, 0xffC0C3BA, 0xffC0C2BF, 0xffC0C1C6, 0xffC0C1C3, 0xffC0C0C8, 0xffC0C0C2, 0xffC0BFC7, 0xffC0BFC5, 0xffC0BFC4, 0xffC0BEC9, 0xffC0BAC6, 0xffBFC6CC, 0xffBFC5C5, 0xffBFC3CE, 0xffBFC2D1, 0xffBFC2CB, 0xffBFC2C7, 0xffBFC0C5, 0xffBFC0C4, 0xffBFC0C2, 0xffBFBFC9, 0xffBFBFC7, 0xffBFBFBF, 0xffBFBEC6,
            0xffBFBEC3, 0xffBFBDCB, 0xffBFBDC0, 0xffBFBCC7, 0xffBFBCC3, 0xffBFBBBA, 0xffBEC7C4, 0xffBEC3C7, 0xffBEC3BF, 0xffBEC2CB, 0xffBEC1C8, 0xffBEBFC4, 0xffBEBFC3, 0xffBEBEC8, 0xffBEBEC6, 0xffBEBEC0, 0xffBEBDC3, 0xffBEBCC1, 0xffBEBBCC, 0xffBEBBC4, 0xffBEB7C9, 0xffBDC5C8, 0xffBDC4CC, 0xffBDC4CA, 0xffBDC3D1,
            0xffBDC2C8, 0xffBDC0C7, 0xffBDBEC3, 0xffBDBEC2, 0xffBDBDC7, 0xffBDBDBF, 0xffBDBCC4, 0xffBDBCC1, 0xffBDBBC6, 0xffBDBBC0, 0xffBDBBBC, 0xffBDBAC5, 0xffBDBAC1, 0xffBDB9C8, 0xffBDB7C1, 0xffBCC5CC, 0xffBCC1C5, 0xffBCC0CC, 0xffBCC0CB, 0xffBCC0C3, 0xffBCC0C1, 0xffBCBFC6, 0xffBCBECD, 0xffBCBDC2, 0xffBCBDC1,
            0xffBCBDBF, 0xffBCBCC6, 0xffBCBBC3, 0xffBCBBC0, 0xffBCBAC7, 0xffBCBABF, 0xffBCB9C0, 0xffBCB7BE, 0xffBCB7BD, 0xffBBC1CD, 0xffBBC0BC, 0xffBBBFC8, 0xffBBBFC2, 0xffBBBEC5, 0xffBBBEC3, 0xffBBBDC9, 0xffBBBDBA, 0xffBBBCC0, 0xffBBBCBE, 0xffBBBBC3, 0xffBBBAC0, 0xffBBB9C6, 0xffBBB9BC, 0xffBBB8C1, 0xffBBB8BF,
            0xffBBB6BA, 0xffBBB4BC, 0xffBAC3CA, 0xffBAC3C8, 0xffBABFC5, 0xffBABFC3, 0xffBABEC7, 0xffBABEC1, 0xffBABEBF, 0xffBABDC4, 0xffBABCBB, 0xffBABBC0, 0xffBABBBF, 0xffBABBBD, 0xffBABAC6, 0xffBABAC4, 0xffBABAC2, 0xffBABABC, 0xffBABAB8, 0xffBAB9C7, 0xffBAB7BE, 0xffBAB5BB, 0xffBAB5B2, 0xffB9C3CD, 0xffB9C1C4,
            0xffB9BEC1, 0xffB9BDBE, 0xffB9BDBC, 0xffB9BCC5, 0xffB9BABE, 0xffB9B9BB, 0xffB9B8BE, 0xffB9B8BD, 0xffB9B7C4, 0xffB9B7B8, 0xffB9B5C3, 0xffB9B3BD, 0xffB8C4C0, 0xffB8C1C0, 0xffB8BFC7, 0xffB8BDC3, 0xffB8BDC1, 0xffB8BCBD, 0xffB8BBC2, 0xffB8B9BE, 0xffB8B9BD, 0xffB8B9BB, 0xffB8B8C2, 0xffB8B8BA, 0xffB8B7BC,
            0xffB7C1C2, 0xffB7BEC8, 0xffB7BCC0, 0xffB7BCBF, 0xffB7BBC6, 0xffB7BBC4, 0xffB7BBBE, 0xffB7BBBC, 0xffB7BAC3, 0xffB7BAC1, 0xffB7B9B8, 0xffB7B8BA, 0xffB7B7C3, 0xffB7B7C1, 0xffB7B6BC, 0xffB7B4BF, 0xffB7B4BD, 0xffB7B3C4, 0xffB7B3B4, 0xffB6BFBE, 0xffB6BDC5, 0xffB6BDC3, 0xffB6BBC1, 0xffB6BBB5, 0xffB6BABD,
            0xffB6B7BB, 0xffB6B7B9, 0xffB6B6C0, 0xffB6B6BE, 0xffB6B6B8, 0xffB6B6B6, 0xffB6B5BB, 0xffB6B5BA, 0xffB6AFB6, 0xffB6AEB9, 0xffB5BCC2, 0xffB5BAC0, 0xffB5BABE, 0xffB5BABD, 0xffB5B9BC, 0xffB5B9B8, 0xffB5B8BF, 0xffB5B8BD, 0xffB5B6BB, 0xffB5B6BA, 0xffB5B6B8, 0xffB5B5BF, 0xffB5B5BD, 0xffB5B5B7, 0xffB5B4BC,
            0xffB5B4B9, 0xffB5B4B2, 0xffB5B3B8, 0xffB5B3B6, 0xffB5B2C3, 0xffB5B2BD, 0xffB5B2B9, 0xffB4B7BE, 0xffB4B7BC, 0xffB4B5BA, 0xffB4B5B7, 0xffB4B4BE, 0xffB4B4BC, 0xffB4B4B4, 0xffB4B3B8, 0xffB4B2C0, 0xffB4B2B5, 0xffB4B1AA, 0xffB4AFB3, 0xffB3BEC2, 0xffB3B8BE, 0xffB3B6BF, 0xffB3B6BB, 0xffB3B5C2, 0xffB3B4B9,
            0xffB3B4B6, 0xffB3B3BD, 0xffB3B3BB, 0xffB3B2B7, 0xffB3B1BE, 0xffB3AEB4, 0xffB3ABC0, 0xffB3ABB6, 0xffB2BEBC, 0xffB2BBBA, 0xffB2BABD, 0xffB2B7BB, 0xffB2B7B0, 0xffB2B6B5, 0xffB2B5BA, 0xffB2B3B7, 0xffB2B3B5, 0xffB2B2BC, 0xffB2B2BA, 0xffB2B2B4, 0xffB2B2B2, 0xffB2B1B9, 0xffB2B1B7, 0xffB2B1B6, 0xffB2B0BB,
            0xffB2AFB6, 0xffB2ADB3, 0xffB1BFC8, 0xffB1BCC2, 0xffB1B9BC, 0xffB1B8C0, 0xffB1B7C3, 0xffB1B7B5, 0xffB1B6BA, 0xffB1B6B9, 0xffB1B5BE, 0xffB1B5B8, 0xffB1B5B4, 0xffB1B4B9, 0xffB1B3BF, 0xffB1B3B0, 0xffB1B2B7, 0xffB1B2B6, 0xffB1B1BD, 0xffB1B1B9, 0xffB1B1B3, 0xffB1B0B6, 0xffB1B0B5, 0xffB1AFBA, 0xffB1AFB4,
            0xffB1AEBF, 0xffB1ACB0, 0xffB1AABC, 0xffB1A8B9, 0xffB0B4B7, 0xffB0B4B5, 0xffB0B3BA, 0xffB0B1B6, 0xffB0B1B5, 0xffB0B1B3, 0xffB0B0BA, 0xffB0B0B8, 0xffB0AFB4, 0xffB0AEB3, 0xffB0AEB1, 0xffB0ADB8, 0xffB0ABB2, 0xffB0ABB1, 0xffB0ABAF, 0xabcdef
    };

    static boolean isNearBlack(int nowColor) {

        for (int c : toBlacks) {
            if (nowColor == c)
                return true;
        }
        return false;
    }

    private static final int [] toWhites = {
            0xffD1BACC, 0xffD0C7C0, 0xffCECCBF, 0xffCEC6BB, 0xffCDC0D2, 0xffCCBFD1, 0xffCAC0CB, 0xffCAC0C9, 0xffCAC0C8, 0xffCABFD0, 0xffC9BFDA, 0xffC9BFCA, 0xffC9BEC6, 0xffC9B7D1, 0xffC8CABD, 0xffC8C8BE, 0xffC8C0CD, 0xffC8C0CB, 0xffC8BFD0, 0xffC8BFC4, 0xffC8BFBA, 0xffC8BEC7, 0xffC8BDCD, 0xffC8BCD0, 0xffC8BBCC,
            0xffC7C9BE, 0xffC7C0D0, 0xffC7BFD4, 0xffC7BFCA, 0xffC7BECF, 0xffC7BDC8, 0xffC7BDC5, 0xffC7BDBB, 0xffC7BCCA, 0xffC6C5C0, 0xffC6C0CE, 0xffC6C0CC, 0xffC6C0CA, 0xffC6BFC6, 0xffC6BED5, 0xffC6BED3, 0xffC6BECD, 0xffC6BECB, 0xffC6BEC9, 0xffC6BDB4, 0xffC6BCC7, 0xffC6BCC4, 0xffC6BAC6, 0xffC5C6B8, 0xffC5C5BD,
            0xffC5C1BE, 0xffC5C1B5, 0xffC5C0D6, 0xffC5C0C7, 0xffC5C0C6, 0xffC5C0C4, 0xffC5BFCD, 0xffC5BFC9, 0xffC5BFC3, 0xffC5BED0, 0xffC5BEC6, 0xffC5BDD2, 0xffC5BDCA, 0xffC5BDC8, 0xffC5BDBB, 0xffC5BBC3, 0xffC4CAC0, 0xffC4C7C0, 0xffC4C5C0, 0xffC4C5BF, 0xffC4C0CF, 0xffC4C0CE, 0xffC4C0C1, 0xffC4C0BF, 0xffC4C0BD,
            0xffC4BFC6, 0xffC4BFC5, 0xffC4BFC3, 0xffC4BECA, 0xffC4BEC8, 0xffC4BDC5, 0xffC4BDC4, 0xffC4BCC9, 0xffC4BCC7, 0xffC4BAC5, 0xffC4B8C4, 0xffC4B5AE, 0xffC3C6BF, 0xffC3C6BD, 0xffC3C5C0, 0xffC3C4BE, 0xffC3C2C0, 0xffC3C0CB, 0xffC3C0C9, 0xffC3C0C7, 0xffC3BFCE, 0xffC3BFCD, 0xffC3BFBE, 0xffC3BEC5, 0xffC3BEC4,
            0xffC3BDCB, 0xffC3BDC7, 0xffC3BDC1, 0xffC3BCDD, 0xffC3BCCC, 0xffC3BCC4, 0xffC3BCC3, 0xffC3BACF, 0xffC3B9C4, 0xffC3B9C2, 0xffC3B8D8, 0xffC3B8C8, 0xffC3B6C0, 0xffC2C7C0, 0xffC2C5BC, 0xffC2C3BE, 0xffC2C3B5, 0xffC2C2C0, 0xffC2C2B8, 0xffC2C0CE, 0xffC2C0CD, 0xffC2C0CB, 0xffC2C0C5, 0xffC2C0C3, 0xffC2C0C1,
            0xffC2BFCA, 0xffC2BFC8, 0xffC2BFC6, 0xffC2BFB6, 0xffC2BECD, 0xffC2BECC, 0xffC2BEBF, 0xffC2BEBD, 0xffC2BDD1, 0xffC2BDC4, 0xffC2BDC3, 0xffC2BDC1, 0xffC2BCCA, 0xffC2BCC8, 0xffC2BCC6, 0xffC2BCBE, 0xffC2BBC3, 0xffC2BBC2, 0xffC2BAC9, 0xffC2BAC7, 0xffC2BAC5, 0xffC2B9CE, 0xffC2B9CA, 0xffC2B7C8, 0xffC2B7BD,
            0xffC2B5BC, 0xffC2B1BB, 0xffC1C6C0, 0xffC1C4BD, 0xffC1C3C0, 0xffC1C3BE, 0xffC1C2BD, 0xffC1C1BF, 0xffC1C0D0, 0xffC1C0CE, 0xffC1C0C8, 0xffC1C0C6, 0xffC1C0C5, 0xffC1C0BC, 0xffC1BFCD, 0xffC1BFCC, 0xffC1BFCA, 0xffC1BFC4, 0xffC1BFC2, 0xffC1BFC0, 0xffC1BED1, 0xffC1BECF, 0xffC1BEC9, 0xffC1BEC7, 0xffC1BEC5,
            0xffC1BDCE, 0xffC1BDCC, 0xffC1BDCB, 0xffC1BDBE, 0xffC1BCC3, 0xffC1BCC2, 0xffC1BCC0, 0xffC1BBC7, 0xffC1BBC5, 0xffC1BACC, 0xffC1BACA, 0xffC1BAC2, 0xffC1BAC1, 0xffC1B9CE, 0xffC1B9C6, 0xffC1B8C9, 0xffC1B7C0, 0xffC1B4C8, 0xffC0CDD3, 0xffC0CCCC, 0xffC0CCC8, 0xffC0CBD1, 0xffC0CBCF, 0xffC0CBCD, 0xffC0CAD6,
            0xffC0CAD3, 0xffC0CACC, 0xffC0CACB, 0xffC0C9DA, 0xffC0C9CE, 0xffC0C9C8, 0xffC0C9C4, 0xffC0C8CB, 0xffC0C8CA, 0xffC0C7D1, 0xffC0C7CF, 0xffC0C7CD, 0xffC0C6D6, 0xffC0C6D2, 0xffC0C6C6, 0xffC0C6C4, 0xffC0C6C2, 0xffC0C6BA, 0xffC0C5CB, 0xffC0C5C9, 0xffC0C5C8, 0xffC0C5C1, 0xffC0C5BF, 0xffC0C4D0, 0xffC0C4CF,
            0xffC0C4CD, 0xffC0C4C7, 0xffC0C4C5, 0xffC0C4C3, 0xffC0C3CC, 0xffC0C3CA, 0xffC0C3C8, 0xffC0C2D1, 0xffC0C2CF, 0xffC0C2CE, 0xffC0C2C1, 0xffC0C2BF, 0xffC0C2BD, 0xffC0C2B7, 0xffC0C1D3, 0xffC0C1C6, 0xffC0C1C5, 0xffC0C1C3, 0xffC0C0CC, 0xffC0C0CA, 0xffC0C0C8, 0xffC0C0C2, 0xffC0C0C0, 0xffC0C0BE, 0xffC0BFCF,
            0xffC0BFCD, 0xffC0BFC7, 0xffC0BFC5, 0xffC0BFC4, 0xffC0BFBD, 0xffC0BFBB, 0xffC0BFBA, 0xffC0BED4, 0xffC0BED3, 0xffC0BECC, 0xffC0BECB, 0xffC0BEC9, 0xffC0BEC3, 0xffC0BEC1, 0xffC0BEBF, 0xffC0BDC8, 0xffC0BDC6, 0xffC0BDC4, 0xffC0BCCB, 0xffC0BCCA, 0xffC0BCB9, 0xffC0BBC2, 0xffC0BBC1, 0xffC0BBBF, 0xffC0BAC8,
            0xffC0BABA, 0xffC0B9C1, 0xffC0B9C0, 0xffC0B8C3, 0xffC0B7CC, 0xffC0B7B2, 0xffC0B5BD, 0xffC0B3C7, 0xffC0B3C4, 0xffC0A8BE, 0xffBFCECB, 0xffBFCDD0, 0xffBFCAD0, 0xffBFCACE, 0xffBFCAC2, 0xffBFC9D3, 0xffBFC9CB, 0xffBFC9C8, 0xffBFC9C1, 0xffBFC8CF, 0xffBFC8CD, 0xffBFC8C7, 0xffBFC8C5, 0xffBFC7DA, 0xffBFC7CA,
            0xffBFC7C9, 0xffBFC6D0, 0xffBFC6CE, 0xffBFC6CC, 0xffBFC6BF, 0xffBFC6B4, 0xffBFC5D1, 0xffBFC5C5, 0xffBFC5C3, 0xffBFC4CA, 0xffBFC4C8, 0xffBFC4C7, 0xffBFC4C0, 0xffBFC4BE, 0xffBFC3CF, 0xffBFC3CE, 0xffBFC3CC, 0xffBFC3C6, 0xffBFC3C4, 0xabcdef

    };

    static boolean isNearWhite(int nowColor) {

        for (int c : toWhites) {
            if (nowColor == c)
                return true;
        }
        return false;
   }
}

